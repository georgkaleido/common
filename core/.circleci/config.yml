version: 2.1

# Declare the orbs that we'll use in our config.
# read more about orbs: https://circleci.com/docs/2.0/using-orbs/
orbs:
  slack: circleci/slack@4.3.1
  gcr: circleci/gcp-gcr@0.13.0

jobs:
  # Build job
  build:
    docker:
      - image: cimg/python:3.9.2
        auth:
          username: ${DOCKERHUB_USER}
          password: ${DOCKERHUB_PASSWORD}
    resource_class: medium
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: Install prerequisites
          command: |
            sudo apt-get update && sudo apt-get install -y --no-install-recommends --fix-missing \
              libopenblas-dev zlib1g-dev libjpeg-dev libpng-dev build-essential
      - run:
          name: Create virtualenv
          command: |
            python3 -m venv .venv
      - run:
          name: Install packages
          command: |
            . .venv/bin/activate
            pip install -r requirements-dev.txt --progress-bar off
            pip install -r requirements.txt --progress-bar off
      - run:
          name: Check and install
          command: |
            . .venv/bin/activate
            python setup.py check
            python setup.py install
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project
            - .venv

  # Deploy job
  deploy:
    docker:
      - image: cimg/python:3.9.2
        auth:
          username: ${DOCKERHUB_USER}
          password: ${DOCKERHUB_PASSWORD}
    resource_class: small
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: /home/circleci
      - run:
          name: Init .pypirc
          command: |
            tee -a /home/circleci/.pypirc > /dev/null \<<EOT
            [distutils]
            index-servers =
                pypi
                fury

            [pypi]
            username =
            password =

            [fury]
            repository: https://deps.kaleido.ai/pypi/
            username = ${FURY_PUSH_TOKEN}
            password =
            EOT
      - run:
          name: Deploy to Gemfury
          command: |
            . .venv/bin/activate
            python setup.py check
            python setup.py sdist upload -r fury --show-response
            python setup.py bdist upload -r fury --show-response
            python setup.py bdist_wheel upload -r fury --show-response

  # Docker
  docker:
    docker:
      - image: google/cloud-sdk:latest
        auth:
          username: ${DOCKERHUB_USER}
          password: ${DOCKERHUB_PASSWORD}
    resource_class: medium
    working_directory: ~/project
    steps:
      - setup_remote_docker:
          version: 20.10.2
      - checkout
      - run:
          name: Install Prerequisites
          command: |
            curl -Lo /usr/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
            chmod +x /usr/bin/jq
            pip3 install yq
      - run:
          name: Build Docker images
          command: |
            if [ -z "$CIRCLE_TAG" ] ; then
              echo "Not a tag, halting build"
              circleci-agent step halt
            fi

            export BUILD_DATE="$(date --rfc-3339=seconds | sed 's/ /T/')"

            echo "Using the following settings:"
            echo "  VCS_REF:    ${CIRCLE_SHA1:0:7}"
            echo "  BUILD_DATE: ${BUILD_DATE}"
            echo "  VERSION:    ${CIRCLE_TAG}"
            echo ""

            # Create empty file
            touch tags.txt

            # Create token files
            echo "${FURY_AUTH_TOKEN}" > fury_auth_token.txt
            echo "${GITHUB_AUTH_TOKEN}" > github_auth_token.txt

            yq -rc '."pytorch-tags" | .[]' docker-build.yml | while read pytorch_tag
            do
                yq -rc '."compute-capabilities" | .[]' docker-build.yml | while read compute_capability
                do
                    echo "Building Docker image for PyTorch ${pytorch_tag} with compute capability ${compute_capability}..."

                    # Create tag and append to tags.txt
                    tag="${DOCKER_IMAGE_NAME}:${CIRCLE_TAG}-pt${pytorch_tag}-cc${compute_capability}"
                    echo "${tag}" >> tags.txt

                    DOCKER_BUILDKIT=1 PROGRESS_NO_TRUNC=1 docker build --progress=tty \
                        --build-arg PYTORCH_IMAGE_TAG=${pytorch_tag} \
                        --build-arg COMPUTE_CAPABILITY=${compute_capability} \
                        --build-arg REMOVEBG_CORE_PY_VERSION=${CIRCLE_TAG} \
                        --build-arg VCS_REF=${CIRCLE_SHA1:0:7} \
                        --build-arg BUILD_DATE=${BUILD_DATE} \
                        --build-arg VERSION=${CIRCLE_TAG} \
                        --build-arg MAX_JOBS=$(nproc) \
                        --secret id=fury_auth_token,src=fury_auth_token.txt \
                        --secret id=github_auth_token,src=github_auth_token.txt \
                        --tag ${tag} \
                        .
                done
              done
      - gcr/gcr-auth
      - run:
          name: Push image to registry
          command: |
            if [ -z "${CIRCLE_TAG}" ] ; then
              echo "Not pushing Docker image"
              circleci-agent step halt
            fi

            echo "Planning to push the following images:"
            cat tags.txt

            touch release-append.txt
            echo -e "\r\n---\r\n### Docker Images\r\nThese images were built for release \`${CIRCLE_TAG}\`. Edit [\`docker-build.yml\`](docker-build.yml) to modify which images should be built.\r\n\r\n" >> release-append.txt

            while IFS="" read -r p || [ -n "$p" ]
            do
              pytorch_version=$(echo "$p" | sed -r 's/.*:(.*)-pt([[:digit:]|\.]*)-cc([[:digit:]]+)/\2/')
              compute_capability=$(echo "$p" | sed -r 's/.*:(.*)-pt([[:digit:]|\.]*)-cc([[:digit:]]+)/\3/')

              echo -e "* PyTorch **${pytorch_version}**, Compute Capability **${compute_capability}**: \`$p\`" >> release-append.txt
              docker push "$p"
            done < tags.txt
      - run:
          name: Edit Release
          command: |
            if [ -z "${CIRCLE_TAG}" ] ; then
              echo "Not pushing Docker image"
              circleci-agent step halt
            fi

            # Install go and github-release
            apt-get update && apt-get install -y --no-install-recommends --fix-missing \
              golang-go
            export PATH=$PATH:$(go env GOPATH)/bin
            go get github.com/github-release/github-release

            # Get current release description
            GITHUB_TOKEN=${GITHUB_AUTH_TOKEN} github-release info \
              --user ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME} --tag "${CIRCLE_TAG}" --json \
            | jq -r ".Releases[0].body" > release-body.txt

            # Append to release description
            GITHUB_TOKEN=${GITHUB_AUTH_TOKEN} github-release edit \
              --user ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME} --tag "${CIRCLE_TAG}" \
              --description "$(cat release-body.txt) $(cat release-append.txt)"
      - slack/notify:
          event: fail
          mentions: '@ops'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
          branch_pattern: none

# Workflows orchestrate the jobs
workflows:
  version: 2

  # Build/deploy pipeline
  pipeline:
    jobs:
      - build:
          context:
            - DockerHub
            - Gemfury
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
      - deploy:
          requires:
            - build
          context:
            - DockerHub
            - Gemfury
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/
      - docker:
          requires:
            - deploy
          context:
            - DockerHub
            - Slack
            - Gemfury
            - Google Cloud remove.bg
            - GitHub
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/
